1378.Replace Employee ID With The Unique Identifier
SELECT EmployeeUNI.Unique_id , Employees.name FROM 
Employees LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;

1068.Product Sales Analysis I
SELECT Product.product_name , Sales.year , Sales.price FROM 
Sales LEFT JOIN Product ON Sales.product_id = Product.product_id;

197. Rising Temperature
SELECT W1.id FROM Weather AS W1 INNER JOIN Weather AS W2 
ON DATEDIFF(W1.recordDate,W2.recordDate)=1 
AND W1.temperature > W2.temperature;

1661.Average Time of Process per Machine[There are 2 types of solutions]
SELECT A1.machine_id, 
ROUND(AVG(A2.timestamp - A1.timestamp), 3) AS processing_time FROM 
Activity AS A1 INNER JOIN Activity AS A2 
ON A1.machine_id = A2.machine_id AND A1.process_id = A2.process_id 
AND A2.activity_type = 'end' AND A1.activity_type = 'start'
GROUP BY machine_id;

SELECT 
A1.machine_id,
ROUND(
      (SELECT AVG(A2.timestamp) FROM Activity A2 WHERE A2.activity_type = 'end' AND A2.machine_id = A1.machine_id) - 
      (SELECT AVG(A2.timestamp) FROM Activity A2 WHERE A2.activity_type = 'start' AND A2.machine_id = A1.machine_id)
,3) as processing_time
FROM Activity A1
GROUND BY A1.machine_id;

577. Employee Bonus
SELECT Employee.name, Bonus.bonus FROM 
Employee LEFT JOIN Bonus ON Employee.empId = Bonus.empId 
WHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL;

1280. Students and Examinations [TWO SOLUTIONS]
SELECT S1.student_id , S1.student_name, 
S2.subject_name , Count(E.student_id) AS attended_exams 
FROM Students AS S1 CROSS JOIN Subjects AS S2
LEFT JOIN Examinations AS E 
ON S1.student_id = E.student_id AND S2.subject_name = E.subject_name
GROUP BY S1.student_id, S1.student_name, S2.subject_name 
ORDER BY S1.student_id ,S2.subject_name;

SELECT s.student_id, s.student_name, sub.subject_name, COALESCE(e.attended_exams, 0) AS attended_exams
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN (
    SELECT student_id, subject_name, COUNT(*) AS attended_exams
    FROM Examinations
    GROUP BY student_id, subject_name
) e USING (student_id, subject_name)
ORDER BY s.student_id, sub.subject_name;

By using USING(common_column_name) is equal to ON Condition in joins;

570. Managers with at Least 5 Direct Reports
SELECT E1.name FROM Employee AS E1 INNER JOIN Employee AS E2 
ON E1.id = E2.managerId 
GROUP BY E2.managerId
HAVING count(*) >= 5 ;

1934. Confirmation Rate
SELECT S.user_id ,
 round(avg(if (C.action='confirmed' ,1,0)),2) AS confirmation_rate FROM Signups AS S LEFT JOIN Confirmations AS C  
ON S.user_id = C.user_id
GROUP BY S.user_id;
